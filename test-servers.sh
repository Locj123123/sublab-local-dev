#!/bin/bash

# SubLab Server Testing Script
# –¶–µ–π —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç—É—î –≤—Å—ñ —Å–µ—Ä–≤–µ—Ä–∏ —Ç–∞ —ó—Ö —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å

echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è SubLab —Å–µ—Ä–≤–µ—Ä—ñ–≤..."
echo "======================================"

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è HTTP –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
test_endpoint() {
    local url=$1
    local name=$2
    local expected_status=${3:-200}
    
    log_info "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è $name: $url"
    
    response=$(curl -s -o /dev/null -w "%{http_code}" "$url" --max-time 10)
    
    if [ "$response" = "$expected_status" ]; then
        log_success "$name - HTTP $response"
        return 0
    else
        log_error "$name - HTTP $response (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è $expected_status)"
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è JSON API
test_json_api() {
    local url=$1
    local name=$2
    local expected_keys=$3
    
    log_info "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è JSON API $name: $url"
    
    response=$(curl -s "$url" --max-time 10)
    http_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" --max-time 10)
    
    if [ "$http_code" = "200" ]; then
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î –≤–∞–ª—ñ–¥–Ω–∏–º JSON
        if echo "$response" | jq . > /dev/null 2>&1; then
            log_success "$name - JSON API –ø—Ä–∞—Ü—é—î"
            return 0
        else
            log_error "$name - –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
            return 1
        fi
    else
        log_error "$name - HTTP $http_code"
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Supabase API
test_supabase_api() {
    local endpoint=$1
    local name=$2
    local apikey="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0"
    
    log_info "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Supabase API $name: $endpoint"
    
    response=$(curl -s "$endpoint" -H "apikey: $apikey" --max-time 10)
    http_code=$(curl -s -o /dev/null -w "%{http_code}" "$endpoint" -H "apikey: $apikey" --max-time 10)
    
    if [ "$http_code" = "200" ]; then
        log_success "$name - Supabase API –ø—Ä–∞—Ü—é—î"
        return 0
    else
        log_error "$name - HTTP $http_code"
        return 1
    fi
}

# –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏
total_tests=0
passed_tests=0
failed_tests=0

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—É
run_test() {
    local test_name=$1
    local test_function=$2
    shift 2
    local test_args=("$@")
    
    total_tests=$((total_tests + 1))
    
    if $test_function "${test_args[@]}"; then
        passed_tests=$((passed_tests + 1))
    else
        failed_tests=$((failed_tests + 1))
    fi
}

echo ""
log_info "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."

# –¢–µ—Å—Ç—É—î–º–æ –±–∞–∑–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏
run_test "Supabase API" test_endpoint "http://localhost:54321/rest/v1/" "Supabase REST API" 200
run_test "Supabase Studio" test_endpoint "http://localhost:54323" "Supabase Studio" 307
run_test "Frontend" test_endpoint "http://localhost:5173" "React Frontend" 200
run_test "Chat Assistant Health" test_endpoint "http://localhost:8001/health" "Chat Assistant API" 200

# –¢–µ—Å—Ç—É—î–º–æ Supabase API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
run_test "Users API" test_supabase_api "http://localhost:54321/rest/v1/users?select=id,email&limit=1" "Users API"
run_test "Agents API" test_supabase_api "http://localhost:54321/rest/v1/agents?select=id,name&limit=1" "Agents API"
run_test "Token Balances API" test_supabase_api "http://localhost:54321/rest/v1/token_balances?select=user_id,balance&limit=1" "Token Balances API"
run_test "Languages API" test_supabase_api "http://localhost:54321/rest/v1/languages?select=id,language&limit=1" "Languages API"
run_test "Voices API" test_supabase_api "http://localhost:54321/rest/v1/voices?select=id,name&limit=1" "Voices API"
run_test "Music API" test_supabase_api "http://localhost:54321/rest/v1/music?select=id,track&limit=1" "Music API"

# –¢–µ—Å—Ç—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
run_test "Test User" test_supabase_api "http://localhost:54321/rest/v1/users?email=eq.test@sublab.local" "Test User Data"

# –¢–µ—Å—Ç—É—î–º–æ SubLab —Å–µ—Ä–≤—ñ—Å–∏ (—è–∫—â–æ –≤–æ–Ω–∏ –∑–∞–ø—É—â–µ–Ω—ñ)
if curl -s -f "http://localhost:8002/health" > /dev/null 2>&1; then
    run_test "SubLab V1" test_endpoint "http://localhost:8002/health" "SubLab V1 (Orchestrator)" 200
else
    log_warning "SubLab V1 –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π (–ø–æ—Ä—Ç 8002)"
fi

if curl -s -f "http://localhost:8003/health" > /dev/null 2>&1; then
    run_test "SubLab V2" test_endpoint "http://localhost:8003/health" "SubLab V2 (Modules & Images)" 200
else
    log_warning "SubLab V2 –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π (–ø–æ—Ä—Ç 8003)"
fi

if curl -s -f "http://localhost:8004/health" > /dev/null 2>&1; then
    run_test "SubLab V3" test_endpoint "http://localhost:8004/health" "SubLab V3 (Audio Generation)" 200
else
    log_warning "SubLab V3 –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π (–ø–æ—Ä—Ç 8004)"
fi

if curl -s -f "http://localhost:8005/health" > /dev/null 2>&1; then
    run_test "SubLab Audio Processor" test_endpoint "http://localhost:8005/health" "SubLab Audio Processor" 200
else
    log_warning "SubLab Audio Processor –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π (–ø–æ—Ä—Ç 8005)"
fi

# –¢–µ—Å—Ç—É—î–º–æ Redis
log_info "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Redis..."
if docker exec sublab-redis redis-cli ping > /dev/null 2>&1; then
    log_success "Redis - –ø—Ä–∞—Ü—é—î"
    passed_tests=$((passed_tests + 1))
else
    log_error "Redis - –Ω–µ –ø—Ä–∞—Ü—é—î"
    failed_tests=$((failed_tests + 1))
fi
total_tests=$((total_tests + 1))

# –¢–µ—Å—Ç—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
log_info "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."
if docker exec supabase_db_frontsublab psql -U postgres -d postgres -c "SELECT 1;" > /dev/null 2>&1; then
    log_success "PostgreSQL - –ø—Ä–∞—Ü—é—î"
    passed_tests=$((passed_tests + 1))
else
    log_error "PostgreSQL - –Ω–µ –ø—Ä–∞—Ü—é—î"
    failed_tests=$((failed_tests + 1))
fi
total_tests=$((total_tests + 1))

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö..."

# –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
test_user_count=$(docker exec supabase_db_frontsublab psql -U postgres -d postgres -t -c "SELECT COUNT(*) FROM users WHERE email = 'test@sublab.local';" 2>/dev/null | tr -d ' \n')
if [ "$test_user_count" = "1" ]; then
    log_success "–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î"
    passed_tests=$((passed_tests + 1))
else
    log_error "–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    failed_tests=$((failed_tests + 1))
fi
total_tests=$((total_tests + 1))

# –¢–µ—Å—Ç–æ–≤–∏–π –∞–≥–µ–Ω—Ç
test_agent_count=$(docker exec supabase_db_frontsublab psql -U postgres -d postgres -t -c "SELECT COUNT(*) FROM agents WHERE agent_id = '999999';" 2>/dev/null | tr -d ' \n')
if [ "$test_agent_count" = "1" ]; then
    log_success "–¢–µ—Å—Ç–æ–≤–∏–π –∞–≥–µ–Ω—Ç —ñ—Å–Ω—É—î"
    passed_tests=$((passed_tests + 1))
else
    log_error "–¢–µ—Å—Ç–æ–≤–∏–π –∞–≥–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    failed_tests=$((failed_tests + 1))
fi
total_tests=$((total_tests + 1))

# –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω—ñ–≤
test_balance=$(docker exec supabase_db_frontsublab psql -U postgres -d postgres -t -c "SELECT balance FROM token_balances WHERE user_id = '00000000-0000-0000-0000-000000000001';" 2>/dev/null | tr -d ' \n')
if [ "$test_balance" = "1000000" ]; then
    log_success "–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω—ñ–≤ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $test_balance"
    passed_tests=$((passed_tests + 1))
else
    log_error "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω—ñ–≤: $test_balance"
    failed_tests=$((failed_tests + 1))
fi
total_tests=$((total_tests + 1))

echo ""
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:"
echo "========================="
echo "–í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤: $total_tests"
echo -e "–ü—Ä–æ–π–¥–µ–Ω–æ: ${GREEN}$passed_tests${NC}"
echo -e "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${RED}$failed_tests${NC}"

if [ $failed_tests -eq 0 ]; then
    echo ""
    log_success "üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!"
    echo ""
    echo "üìã –î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:"
    echo "===================================="
    echo "‚Ä¢ Supabase Studio: http://localhost:54323"
    echo "‚Ä¢ Frontend: http://localhost:5173"
    echo "‚Ä¢ Chat Assistant API: http://localhost:8001"
    echo "‚Ä¢ Supabase API: http://localhost:54321/rest/v1/"
    echo ""
    echo "üß™ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ:"
    echo "================"
    echo "‚Ä¢ –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: test@sublab.local"
    echo "‚Ä¢ –¢–µ—Å—Ç–æ–≤–∏–π –∞–≥–µ–Ω—Ç ID: 999999"
    echo "‚Ä¢ –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω—ñ–≤: 1,000,000"
    echo ""
    echo "üí° –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
    echo "==================="
    echo "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏: docker-compose logs -f [service-name]"
    echo "‚Ä¢ –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –ë–î: docker exec -it supabase_db_frontsublab psql -U postgres -d postgres"
    echo "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å: docker-compose restart [service-name]"
    exit 0
else
    echo ""
    log_error "‚ùå –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è!"
    echo ""
    echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:"
    echo "================================"
    echo "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑–∞–ø—É—â–µ–Ω—ñ: docker-compose ps"
    echo "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏: docker-compose logs [service-name]"
    echo "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å–∏: docker-compose restart"
    echo "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏: ./start-servers.sh"
    exit 1
fi
